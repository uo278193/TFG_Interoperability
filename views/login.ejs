<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
   <link rel="stylesheet" href="/styles/styles.css">

</head>
<body>
  <%- include('partials/_nav') %>
    <h1>Login</h1>
    <form action="/api/auth/login" method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>   
        <br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
        <br>
        <button type="submit">Login</button>
    </form>
    


    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <div id="g_id_onload"
         data-client_id="713188700274-j3iirib1j0qvd0n5b63eirvb67k7in6o.apps.googleusercontent.com"
         data-callback="onSignIn">
    </div>
    <div class="g_id_signin" data-type="standard"></div>
    
  

    <script>

        var url = ( window.location.hostname.includes('localhost') )
                    ?'http://localhost:8080/api/auth/google'
                    :'https://restserver-example-v1.herokuapp.com/api/auth/google'
    
        function onSignIn(googleUser) {
            console.log("Entrado en onSignIn");
                    
                    // Utilizar `googleUser.credential` directamente como `id_token`
                    const id_token = googleUser.credential;
                    console.log("ID Token:", id_token);

                    // Enviar el id_token al backend
                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({  id_token })
                    })
                    .then(data =>{ window.location.href = `/api/auth/personalinfo`;})
                    .catch(error => console.error('Error:', error));
        }

        function decodeJwtResponse(token) {
        // Divide el token en sus tres partes (header, payload y signature)
        const base64Url = token.split('.')[1]; // Solo la parte del payload (posiciÃ³n 1)
        
        // Decodifica el payload de Base64
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const decodedPayload = decodeURIComponent(
            atob(base64)
            .split('')
            .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
            .join('')
        );

        // Parsea el JSON y devuelve el objeto resultante
        return JSON.parse(decodedPayload);
        }

        function signOut() {
            var auth2 = gapi.auth2.getAuthInstance();
            auth2.signOut().then(function () {
            console.log('User signed out.');
            });
        }

    </script>
</body>
</html>
